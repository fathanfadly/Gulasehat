/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tebakbaku;
import java.util.List;
import java.util.Arrays;
import java.util.stream.Collectors;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import javax.swing.JOptionPane;

/**
 *
 * @author syuja
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    List<Word> generatedWords = DatabaseHandler.getAllWords();
    private int userScore = 0;
    private Timer countdownTimer;
    private int secondsLeft = 30;
    
    public Game() {
        initComponents();
        initializeTimer();
        this.generatedWords = generatedWords;  // Initialize the generatedWords field
        displayGeneratedWords();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        GeneratedWords = new javax.swing.JTextArea();
        GeneratedWordsLabel = new javax.swing.JLabel();
        AnswerLabel = new javax.swing.JLabel();
        Timer = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Answer = new javax.swing.JTextArea();
        AnswerSubmit = new javax.swing.JButton();
        BackToMenu = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(78, 110, 129));

        jScrollPane1.setViewportView(GeneratedWords);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        GeneratedWords.setEditable(false);
        GeneratedWords.setBackground(new java.awt.Color(255, 255, 255));
        GeneratedWords.setColumns(20);
        GeneratedWords.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        GeneratedWords.setForeground(new java.awt.Color(46, 56, 64));
        GeneratedWords.setRows(5);
        jScrollPane1.setViewportView(GeneratedWords);

        GeneratedWordsLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        GeneratedWordsLabel.setForeground(new java.awt.Color(255, 255, 255));
        GeneratedWordsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        GeneratedWordsLabel.setText("Generated Words");

        AnswerLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        AnswerLabel.setForeground(new java.awt.Color(255, 255, 255));
        AnswerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        AnswerLabel.setText("Write your answers below");

        Timer.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        Timer.setForeground(new java.awt.Color(255, 255, 255));
        Timer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        Answer.setBackground(new java.awt.Color(255, 255, 255));
        Answer.setColumns(20);
        Answer.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        Answer.setForeground(new java.awt.Color(46, 56, 64));
        Answer.setRows(5);
        jScrollPane2.setViewportView(Answer);

        AnswerSubmit.setBackground(new java.awt.Color(46, 56, 64));
        AnswerSubmit.setFont(new java.awt.Font("Segoe UI Semibold", 0, 12)); // NOI18N
        AnswerSubmit.setForeground(new java.awt.Color(255, 255, 255));
        AnswerSubmit.setText("Submit");
        AnswerSubmit.setBorderPainted(false);
        AnswerSubmit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AnswerSubmit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        AnswerSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnswerSubmitActionPerformed(evt);
            }
        });

        BackToMenu.setFont(new java.awt.Font("Segoe UI Semibold", 1, 12)); // NOI18N
        BackToMenu.setForeground(new java.awt.Color(255, 255, 255));
        BackToMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/tebakbaku/image/icons8-back-15.png"))); // NOI18N
        BackToMenu.setText("Back To Menu");
        BackToMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BackToMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BackToMenuMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(349, 349, 349)
                .addComponent(AnswerSubmit, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                .addGap(351, 351, 351))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(BackToMenu)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(GeneratedWordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AnswerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Timer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2))
                        .addGap(50, 50, 50))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(BackToMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GeneratedWordsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(Timer, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(AnswerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(AnswerSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackToMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BackToMenuMouseClicked
        countdownTimer.stop(); 
            // Ask the user if they are sure they want to go back to the menu
            int confirmOption = JOptionPane.showConfirmDialog(
                    this,
                    "Are you sure you want to go back to the menu?\nYour progress will not be saved.",
                    "Confirmation",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE);

            if (confirmOption == JOptionPane.YES_OPTION) {
                // Go back to the menu
                FrameManager.navigateToMenu(this);
            }
            else {
                countdownTimer.start();
            }
        
    }//GEN-LAST:event_BackToMenuMouseClicked

    private void AnswerSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnswerSubmitActionPerformed
        // Stop the timer
        countdownTimer.stop();

        // Get the user's answer from the Answer JTextArea
        String userAnswer = Answer.getText().trim();

        // Get the correct words from the generated words
        List<String> correctWords = generatedWords.stream()
                                                .filter(Word::isCorrect)
                                                .map(Word::getWord)
                                                .collect(Collectors.toList());

        // Split the user's answer into individual words
        String[] userAnswerWords = userAnswer.split("\\s+");

        // Debugging information
        System.out.println("User Answer: " + Arrays.toString(userAnswerWords));
        System.out.println("Correct Words: " + correctWords);

        // Calculate the score based on correct answers
        int correctAnswers = 0;
        for (String userWord : userAnswerWords) {
            if (correctWords.contains(userWord)) {
                correctAnswers++;
            }
        }

        // Debugging information
        System.out.println("Correct Answers Count: " + correctAnswers);

        // Calculate the final score
        int totalScore = correctAnswers * 10;
        
        userScore = totalScore;
        
        // Display the score or update it as needed
        System.out.println("Total Score: " + totalScore);
        
        int userId = DatabaseHandler.getCurrentUserId();// Get the user ID (
        DatabaseHandler.updatePlayerScore(userId, totalScore);
        
        displayScoreAndEndGame();
        

    }//GEN-LAST:event_AnswerSubmitActionPerformed

    private void displayGeneratedWords() {
        // Use the generatedWords field directly, no need to fetch them again
        System.out.println("Number of words in the list: " + generatedWords.size());

        // Display the words in the GeneratedWords JTextArea
        StringBuilder generatedWordsText = new StringBuilder();
        int wordsPerLine = 0;

        for (int i = 0; i < generatedWords.size(); i++) {
            Word currentWord = generatedWords.get(i);
            String wordText = currentWord.getWord();

            // Add square brackets around correct words

            generatedWordsText.append(wordText).append(" ");
            wordsPerLine++;

            // Check if the number of words per line exceeds a threshold (adjust as needed)
            if (wordsPerLine >= 10) {
                generatedWordsText.append("\n");
                wordsPerLine = 0; // Reset the word count for the next line
            }
        }
        GeneratedWords.setText(generatedWordsText.toString());
    }

    private void initializeTimer() {
        countdownTimer = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Timer.setText("Timer: " + secondsLeft + " seconds");

                if (secondsLeft == 0) {
                    // Handle game end logic here
                    countdownTimer.stop();
                    displayScoreAndEndGame();
                } else {
                    secondsLeft--;
                }
            }
        });

        countdownTimer.start();
    }
    
    private void displayScoreAndEndGame() {
        // Display the score and prompt the user to continue or go back to the menu
        int option = JOptionPane.showOptionDialog(
                this,
                "Game Over!\nYour Score: " + userScore,
                "Game Over",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null,
                new Object[]{"Continue", "Back to Menu"},
                "Continue");

        // Handle user's choice
        if (option == JOptionPane.YES_OPTION) {
            FrameManager.navigateToGame(this);
        } else {
            // Go back to the menu
            FrameManager.navigateToMenu(this);
        }
    }


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea Answer;
    private javax.swing.JLabel AnswerLabel;
    private javax.swing.JButton AnswerSubmit;
    private javax.swing.JLabel BackToMenu;
    private javax.swing.JTextArea GeneratedWords;
    private javax.swing.JLabel GeneratedWordsLabel;
    private javax.swing.JLabel Timer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
